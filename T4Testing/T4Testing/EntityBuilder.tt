<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Data.Entity.Design.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Collections.Generic" #>
<#
  //************************************************************************************
  // This T4 generates controllers from the specified DB and saves them to the specified fold  // folder which is relative to the template's location. One file per table/controller.
     // Taken from http://www.haneycodes.net/automatically-generate-pocos-from-db-with-t4/
  //************************************************************************************

  //****************************
  // DEFINE YOUR VARIABLES HERE
  //****************************
    // The SQL server name or IP
    string sqlServer = ".";
    // The SQL username
    string sqlLogin = "sa";
    // The SQL password
    string sqlPassword = "1";
    // The SQL database to generate the POCOs for
    string sqlDatabase = "TestDb";
    // The namespace to apply to the generated classes
    string classNamespace = "T4Testing";
  // The destination folder for the generated classes, relative to this file's location.
  string destinationFolder = "ControllerFolder";

  // Loop over each table and create a class file!
  Server server = new Server(sqlServer);
  server.ConnectionContext.LoginSecure = false;
  server.ConnectionContext.Login = sqlLogin;
  server.ConnectionContext.Password = sqlPassword;
  server.ConnectionContext.Connect();

  foreach (Table table in server.Databases[sqlDatabase].Tables)
  {

     // Skip sys tables
     if (table.Name.StartsWith("sys"))
     {
        continue;
     }

     string tableName = table.Name;
     string tableNameLower = LowerFirstChar(tableName);
     string singularizedTableName = Singularize(tableName);
     string singularizedTableNameLower = LowerFirstChar(singularizedTableName);

     // Initialize strings for our primary keys in various formats
     string keyList = string.Empty;                                                             // for function definitions: Function(int id1, int id2...)
     string keyParamList = string.Empty;                                                        // for function calls: var f = Function(id1, id2...)
     string keyRouteList = string.Empty;                                                        // for route decorations: [Route(“{id1:int}/{id2:int}”)]

     // Keep count so we don't whitespace the last property/column
     ColumnCollection columns = table.Columns;
     List<Column> keys = new List<Column>();

     int colCount = columns.Count;

     // Iterate over all columns
     for(int i = 0; i < colCount; i++)
     {
        Column col = columns[i];

        if(col.InPrimaryKey)
           keys.Add(col);
     }

     int keyCount = keys.Count;

     // Iterate over all primary keys
     for(int i = 0; i < keyCount; i++)
     {
        Column key = keys[i];

        string keyName = key.Name;

        string propertyType = GetNetDataType(key.DataType.Name);

        // add key to lists
        keyList += propertyType + " " + keyName;
        keyParamList += keyName;
        keyRouteList += "{" + keyName + ":" + propertyType + "}";

        // Do we insert the comma/space/&&?
        if(i < keyCount - 1)
        { 
           keyList += ", ";
           keyParamList += ", ";
           keyRouteList += "/";
        }
     }
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Newtonsoft.Json;

namespace <#= classNamespace #>
{
     [RoutePrefix("api/<#= tableNameLower #>")]
   public class <#= singularizedTableName #>Controller : ApiController
   {
     I<#= singularizedTableName #>DTOService _service;

     public <#= singularizedTableName #>Controller(I<#= singularizedTableName #>DTOService service)
     {
        this._service = service;
     }

     // GET: api/<#= tableName #>
     [Route("")]
     public IEnumerable<<#= singularizedTableName #>DTO> Get()
     {
        return _service.GetAll<#= tableName #>();
     }

     // GET: api/<#= tableName #>/5
     [Route("<#= keyRouteList #>")]
     public IHttpActionResult Get<#= singularizedTableName #>(<#= keyList #>)
     {
        var <#= singularizedTableNameLower #> = _service.Get<#= singularizedTableName #>(<#= keyParamList #>);
        if (<#= singularizedTableNameLower #> == null)
        {
          return NotFound();
        }
        return Ok(<#= singularizedTableNameLower #>);
     }

     // POST: api/<#= tableName #>
     [Route("")]
     public IHttpActionResult Post([FromBody]dynamic data)
     {
       string value = data.value;
       var result = _service.Insert<#= singularizedTableName #>(JsonConvert.DeserializeObject<<#= singularizedTableName #>DTO>(value));
       if (result.Contains(ResponseMessages.Exception.GetDescription()))
       {
          return BadRequest(result);
       }
       return Created("/<#= singularizedTableNameLower #>", result);
     }

     // PUT: api/<#= tableName #>/5
     [Route("<#= keyRouteList #>")]
     public IHttpActionResult Put(<#= keyList #>, [FromBody]dynamic data)
     {
       string value = data.value;
       var result = _service.Update<#= singularizedTableName #>(<#= keyParamList #>, JsonConvert.DeserializeObject<<#= singularizedTableName #>DTO>(value));
       if (result.Contains(ResponseMessages.Exception.GetDescription()))
       {
          return BadRequest(result);
       }
       return Ok(result);
    }

    // DELETE: api/<#= tableName #>/5
    [Route("<#= keyRouteList #>")]
    public IHttpActionResult Delete(<#= keyList #>)
    {
       var result = _service.Delete<#= singularizedTableName #>(<#= keyParamList #>);
       if (result.Contains(ResponseMessages.Exception.GetDescription()))
       {
          return BadRequest(result);
       }
       return Ok(result);
    }
  }
}
<#
    // Write new class to its own file
    SaveOutput(tableName + "Controller.cs", destinationFolder);
    }
#>
<#+
  public static string GetNetDataType(string sqlDataTypeName)
  {  
    switch (sqlDataTypeName.ToLower())
    {
      case "bigint":
        return "Int64";
      case "binary":
      case "image":
      case "varbinary":
        return "byte[]";
      case "bit":
        return "bool";
      case "char":
        return "char";
      case "datetime":
      case "smalldatetime":
        return "DateTime";
      case "decimal":
      case "money":
      case "numeric":
        return "decimal";
      case "float":
        return "double";
      case "int":
        return "int";
      case "nchar":
      case "nvarchar":
      case "text":
      case "varchar":
      case "xml":
        return "string";
      case "real":
        return "single";
      case "smallint":
        return "Int16";
      case "tinyint":
        return "byte";
      case "uniqueidentifier":
        return "Guid";
               
      default:
        return null;
    }
  }

void SaveOutput(string outputFileName, string destinationFolder)
{
   // Write to destination folder
   string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
   string outputFilePath = Path.Combine(templateDirectory, outputFileName);
   if(!File.Exists(outputFilePath))
   {
         //File.Delete(outputFilePath);
         File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
   }

   // Flush generation
   this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

public static string Pluralize(String s)
{
return s;
    //return System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture).Pluralize(s);
}

public static string Singularize(String s)
{return s;
    //return System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture).Singularize(s);
}

public static string LowerFirstChar(string input)
{
    return Char.ToLowerInvariant(input[0]) + input.Substring(1);
}

#>