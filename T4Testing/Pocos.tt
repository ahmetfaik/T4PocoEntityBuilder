<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Data.Entity.Design.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#
//*******************************************************************************************
// This T4 generates POCOs from the specified DB and saves them to the specified folder which// is relative to the template's location. One file per table/POCO.
// Taken from http://www.haneycodes.net/automatically-generate-pocos-from-db-with-t4/
//*******************************************************************************************
//****************************
// DEFINE YOUR VARIABLES HERE
//****************************
// The SQL server name or IP
    // The SQL server name or IP
    string sqlServer = ".";
    // The SQL username
    string sqlLogin = "sa";
    // The SQL password
    string sqlPassword = "1";
    // The SQL database to generate the POCOs for
    string sqlDatabase = "TestDb";
    // The namespace to apply to the generated classes
    string classNamespace = "T4Testing";
   // The destination folder for the generated classes, relative to this file's location.
   string destinationFolder = "PocoFolder";

// Loop over each table and create a class file!
Server server = new Server(sqlServer);
server.ConnectionContext.LoginSecure = false;
server.ConnectionContext.Login = sqlLogin;
server.ConnectionContext.Password = sqlPassword;
server.ConnectionContext.Connect();

foreach (Table table in server.Databases[sqlDatabase].Tables)
{
  // Skip sys tables
  if (table.Name.StartsWith("sys"))
  {
     continue;
  }
#>
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace <#= classNamespace #>
{
  /// <summary>
  /// Represents a <#= Singularize(table.Name) #>.
  /// NOTE: This class is generated from a T4 template - you should not modify it manually.
  /// </summary>
  public class <#= Singularize(table.Name) #> 
  {
<# 
      // Iterate over all columns first to get a count of primary keys
      // to know whether to add a "Column(Order = x)" decoration to the key
      int columnCount = table.Columns.Count;
      int keyCount = 0;

      for(int i = 0; i < columnCount; i++)
      {
          if(table.Columns[i].InPrimaryKey)
              keyCount++;
      }
      
      // Keep count so we don't whitespace the last property/column
      int j = 0;

      // Iterate all columns
      foreach (Column col in table.Columns)
      {
          j++;
          string propertyType = GetNetDataType(col.DataType.Name);

          // If we can't map it, skip it
          if (string.IsNullOrWhiteSpace(propertyType))
          {
               // Skip
               continue;
      }

      // Handle nullable columns by making the type nullable
      if (col.Nullable && propertyType != "string")
      {
          propertyType += "?";
      }

      if(col.InPrimaryKey)
      {
#>
      [Key<# if(keyCount > 1){ #>, Column(Order = <#= j-1 #>)<# } #>]
<#    } #>
   public <#= propertyType #> <#= col.Name #> { get; set; }
<#
      // Do we insert the space?
      if (j != columnCount)
      {
#>

<#
      }
    }
#>
  }
}
<#
    // Write new POCO class to its own file
    SaveOutput(Singularize(table.Name) + ".cs", destinationFolder);
  } 
#>
<#+
  public static string GetNetDataType(string sqlDataTypeName)
  {
    switch (sqlDataTypeName.ToLower())
    {
      case "bigint":
        return "Int64";
      case "binary":
      case "image":
      case "varbinary":
        return "byte[]";
      case "bit":
        return "bool";
      case "char":
        return "char";
      case "datetime":
      case "smalldatetime":
        return "DateTime";
      case "decimal":
      case "money":
      case "numeric":
        return "decimal";
      case "float":
        return "double";
      case "int":
        return "int";
      case "nchar":
      case "nvarchar":
      case "text":
      case "varchar":
      case "xml":
        return "string";
      case "real":
        return "single";
      case "smallint":
        return "Int16";
      case "tinyint":
        return "byte";
      case "uniqueidentifier":
        return "Guid";
             
      default:
        return null;
    }
  }

  void SaveOutput(string outputFileName, string destinationFolder)
  {
     // Write to destination folder
     string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
     string outputFilePath = Path.Combine(templateDirectory, outputFileName);
     
     File.Delete(outputFilePath);
     File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

     // Flush generation
     this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }

  public static string Pluralize(String s)
  {
  return s;
       return System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture).Pluralize(s);
  }

  public static string Singularize(String s)
  {
  return s;
       return System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture).Singularize(s);
  }

#>